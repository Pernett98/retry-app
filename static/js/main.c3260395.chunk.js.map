{"version":3,"sources":["ports/http/client/circuitBreakerHttpClient.ts","ports/http/services/repositoryService.ts","ports/dom/Configure/useForm.ts","ports/dom/Configure/Configure.tsx","ports/dom/RepositoryList/useRepositoryData.ts","ports/dom/RepositoryList/RepositoryList.tsx","ports/dom/App.tsx","ports/dom/reportWebVitals.ts","mock_server/generateData.ts","mock_server/handlers.ts","mock_server/browser.ts","index.ts","ports/dom/index.tsx"],"names":["shouldRetry","ref","check","flow","s","console","log","result","isClosed","isBreakerStateClosed","breakerEnvironment","pipe","breakerState","read","IO","tag","a","E","handleErrors","response","ok","Promise","reject","Error","status","toString","client","breakerConfig","IOR","breakerClosed","retryConfig","maxTime","delay","limit","maxBreakerFailures","request","circuitBreaker","fetcher","retryPolicy","capDelay","monoidRetryPolicy","concat","exponentialBackoff","limitRetries","configureRetryPolicy","retrying","TE","previousDelay","O","logDelay","breakerService","circuitBreakerHttpClient","resetTimeoutSecs","breakerDescription","fetchRepositories","fetch","then","res","json","useForm","handleOnFinish","useCallback","formData","failures","configureFailure","layout","labelCol","span","wrapperCol","tailLayout","offset","Configure","orientation","initialValues","size","onFinish","Item","name","label","min","max","type","htmlType","useRepositoryData","useState","initial","repositories","setRepositories","getRepos","pending","req","err","failure","success","getRepositories","columns","title","dataIndex","key","foldRepoData","fold","active","error","message","dataSource","RepositoryList","onClick","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","genRepositories","recordOf","string","int","language","sampleGenerator","generateSample","count","seed","mkSeed","handlers","rest","get","ctx","url","searchParams","Number","failureCounter","setupWorker","start","catch","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.c3260395.chunk.js","sourcesContent":["import { Either } from 'fp-ts/lib/Either';\nimport { TaskEither } from 'fp-ts/lib/TaskEither';\nimport { Task } from 'fp-ts/lib/Task';\nimport { State } from 'fp-ts/lib/State';\nimport * as O from 'fp-ts/lib/Option'\nimport * as TE from 'fp-ts/lib/TaskEither';\nimport * as IOR from 'fp-ts/lib/IORef';\nimport * as IO from 'fp-ts/lib/IO';\nimport { flow, pipe } from 'fp-ts/lib/function';\nimport { log } from 'fp-ts/lib/Console';\n\nimport { breakerClosed } from 'circuit-breaker-monad/lib/helpers';\nimport { circuitBreaker } from 'circuit-breaker-monad/lib';\nimport { BreakerEnvironment, BreakerOptions } from 'circuit-breaker-monad/lib/types';\nimport {\n  capDelay,\n  exponentialBackoff,\n  limitRetries,\n  monoidRetryPolicy,\n  RetryStatus,\n} from 'retry-ts'\nimport { retrying } from 'retry-ts/lib/Task'\n\nexport type RetryConfig = {\n  maxTime: number,\n  delay: number,\n  limit: number,\n};\n\nexport type BreakerConfig = BreakerOptions & {\n  maxTime: number,\n  delay: number\n};\n\nconst configureRetryPolicy = ({ maxTime, delay, limit }: RetryConfig) => capDelay(\n  maxTime,\n  monoidRetryPolicy\n    .concat(\n      exponentialBackoff(delay),\n      limitRetries(limit)\n    )\n)\n\ntype ShouldRetry<E,A> = {\n  ref: BreakerEnvironment<A>,\n  check: (a: Either<Error | E, A>) => boolean\n}\n\nconst shouldRetry = <E,A>({\n  ref,\n  check\n}: ShouldRetry<E,A>) => flow(\n  (s: Either<E,A>) => {\n    console.log('s',{s, ref})\n    return s\n  },\n  (result) => ({\n    result,\n    isClosed: isBreakerStateClosed(ref)()\n  }),\n  ({isClosed, result}) => isClosed && check(result),\n)\n\nconst isBreakerStateClosed = <A>(breakerEnvironment: BreakerEnvironment<A>) =>\n  pipe(\n    breakerEnvironment.breakerState.read,\n    IO.map(s => s.tag === 'Closed')\n  )\n\nconst logDelay = (status: RetryStatus) =>\n  TE.rightIO(\n    log(\n      pipe(\n        status.previousDelay,\n        O.map(delay => `retrying in ${delay} milliseconds...`),\n        O.getOrElse(() => 'first attempt...')\n      )\n    )\n  )\n\nexport const circuitBreakerHttpClient = (\n  breakerConfig: BreakerConfig,\n) => {\n  const breakerState = IOR.newIORef(breakerClosed(0))();\n  const retryConfig = {\n    maxTime: breakerConfig.maxTime,\n    delay: breakerConfig.delay,\n    limit: breakerConfig.maxBreakerFailures,\n  };\n\n  return <\n    E extends Error,\n    A,\n    T extends Task<A> = Task<A>\n  >(\n    request: T,\n    check: (a: Either<Error | E, A>) => boolean,\n  ) =>  {\n    const breakerService: State<BreakerEnvironment<A>, TaskEither<Error | E, A>> = (\n      { request, breakerState }\n    ) => {\n\n      const fetcher = circuitBreaker<A>()(breakerConfig);\n      const [result, ref] = fetcher({ request, breakerState })\n\n      const retryPolicy = configureRetryPolicy(retryConfig);\n\n      return [\n        retrying(\n          retryPolicy,\n          (status) => pipe(\n            logDelay(status),\n            TE.apSecond(result)\n          ),\n          shouldRetry<E | Error,A>({\n            check,\n            ref\n          })\n        ),\n        ref,\n      ];\n    };\n\n    return breakerService({ breakerState, request });\n  };\n}\n","import { failure, RemoteData, success } from '@devexperts/remote-data-ts'\nimport * as E from 'fp-ts/lib/Either'\nimport * as TE from 'fp-ts/lib/TaskEither'\nimport { pipe } from 'fp-ts/lib/function'\nimport { Repository } from \"../../../domain/Repository\";\nimport { BreakerConfig, circuitBreakerHttpClient } from \"../client/circuitBreakerHttpClient\"\n\nconst check = (a: E.Either<Error, Repository[]>) => E.isLeft(a);\nconst breakerOptions: BreakerConfig = {\n  maxTime: 20000,\n  delay: 400,\n  maxBreakerFailures: 3,\n  resetTimeoutSecs: 10,\n  breakerDescription: 'Repository Client failed!'\n}\n\nconst handleErrors = (response: Response) => !response.ok ? \n  Promise.reject(new Error(response.status.toString())) : \n  response\n  \n\nconst client = circuitBreakerHttpClient(breakerOptions)\n\nexport const configureFailure = (failures: number) => \n  fetch(`/config?failures=${failures}`)\n\nconst fetchRepositories = () => fetch('/repositories')\n  .then(handleErrors)\n  .then(res => res.json())\n\nexport const getRepositories = () => pipe(\n  client(\n    fetchRepositories,\n    check\n  ),\n  ([req, ref]) => req,\n  TE.fold<Error, Repository[], RemoteData<Error, Repository[]>>(\n      err => async () => {\n        console.log(err)\n        return failure(err)\n      }, \n      repositories => async () => success(repositories)\n    )\n)\n\n","import { useCallback } from \"react\"\nimport { configureFailure } from \"../../http/services/repositoryService\"\n\nexport const useForm = () => {\n  \n   const handleOnFinish = useCallback(\n    (formData) => configureFailure(formData.failures),\n    [],\n  )\n\n  return {\n    handleOnFinish,\n  }\n}","import { Divider, InputNumber, Button, Form } from 'antd'\nimport React from 'react'\nimport { useForm } from './useForm'\n\nconst layout = {\n  labelCol: {\n    span: 8,\n  },\n  wrapperCol: {\n    span: 16,\n  },\n};\nconst tailLayout = {\n  wrapperCol: {\n    offset: 8,\n    span: 16,\n  },\n};\n\nexport const Configure = () => {\n  const {\n    handleOnFinish\n  } = useForm()\n\n  return (\n    <div>\n      <Divider orientation='center'>\n        Configure Failures\n      </Divider>\n      <Form \n        {...layout}\n        initialValues={{\n          failures: 3\n        }}\n        size='large'\n        onFinish={handleOnFinish}\n      >\n        <Form.Item\n          name='failures'\n          label='Failures'\n        >\n          <InputNumber\n            min={0}\n            max={10}\n          />\n        </Form.Item>\n        <Form.Item {...tailLayout}>\n          <Button type='primary' htmlType=\"submit\">\n            Config\n          </Button>\n        </Form.Item>\n      </Form>\n    </div>\n  )\n}","import { useCallback, useState } from \"react\"\nimport { initial, pending, RemoteData } from '@devexperts/remote-data-ts'\n\nimport { Repository } from \"../../../domain/Repository\"\n\nimport { getRepositories } from '../../http/services/repositoryService'\n\nexport const useRepositoryData = () => {\n  const [repositories, setRepositories] = useState<RemoteData<Error, Repository[]>>(initial)\n  const getRepos = useCallback(\n  () => {\n    setRepositories(pending)\n    getRepositories()()\n      .then(setRepositories)\n  },\n    [],\n  )\n\n  return {\n    repositories,\n    getRepos\n  }\n}","import React from 'react'\nimport { useRepositoryData } from './useRepositoryData'\nimport { fold } from '@devexperts/remote-data-ts'\n\nimport { Repository } from '../../../domain/Repository'\nimport { Table, Skeleton, Alert, Button } from 'antd'\n\nconst columns = [\n  {\n    title: 'Name',\n    dataIndex: 'name',\n    key: 'name',\n  },\n  {\n    title: 'Language',\n    dataIndex: 'language',\n    key: 'language',\n  },\n  {\n    title: 'Starts',\n    dataIndex: 'starts',\n    key: 'starts',\n  },\n];\n\nconst renderRepositories = (repositories: Repository[]) => (\n  <Table\n    dataSource={repositories} \n    columns={columns} \n  />\n)\n\nconst renderLoading = () => <Skeleton active />\n\n\nconst renderInitial = () => <></>\n\nconst renderError = (error: Error) => {\n  console.log({error})\n  return <Alert \n  type='error'\n  message={error.message}\n/>\n}\n  \n\nconst foldRepoData = fold<Error, Repository[], JSX.Element>(\n  renderInitial,\n  renderLoading,\n  renderError,\n  renderRepositories,\n)\n\n\nexport const RepositoryList = () => {\n  const {\n    repositories,\n    getRepos\n  } = useRepositoryData()\n  \n  return (\n    <div>\n      <Button size='large' type='primary' onClick={getRepos}>Search</Button>\n      {foldRepoData(repositories)}\n    </div>\n  )\n}","import React from 'react';\nimport './App.css';\nimport { Configure } from './Configure/Configure';\nimport { RepositoryList } from './RepositoryList/RepositoryList';\nimport { Divider } from 'antd';\n\nfunction App() {\n  return (\n    <>\n      <Configure />\n      <Divider />\n      <RepositoryList />\n    </>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { RepositoryResponse } from '../domain/Repository'\nimport { \n  Gen, \n  generateSample, \n  recordOf,\n  string,\n  int,\n  mkSeed,\n} from '@no-day/fp-ts-generators'\n\nconst genRepositories: Gen<RepositoryResponse> = recordOf({\n  name: string(),\n  'stargazers_count': int({ min: 0, max: 100 }),\n  language: string()\n})\n\nconst sampleGenerator = generateSample({\n  count: 30,\n  seed: mkSeed(1998),\n  size: 25\n})\n\nexport const generateRepositories = () => sampleGenerator(genRepositories)","import { rest } from 'msw'\nimport { generateRepositories } from './generateData'\n\nlet failures = 3\n\nexport const handlers = [\n  rest.get('/config', (req, res, ctx) => {\n    console.log(req.url.searchParams.get('failures'))\n    failures = Number(req.url.searchParams.get('failures')) || 3\n    res(ctx.json({}))\n  }),\n  rest.get('/repositories', (req, res, ctx) => {\n    const result = failures > 0 ?\n    res(\n      ctx.status(404),\n      ctx.json({ failureCounter: failures })\n    ) :\n    res(\n      ctx.status(200),\n      ctx.json(generateRepositories())\n    )\n    failures >= 0 && failures--\n    return result\n  }),\n]\n","import { setupWorker } from 'msw'\nimport { handlers } from './handlers'\n// This configures a Service Worker with the given request handlers.\nexport const worker = setupWorker(...handlers)\n\n","import { createReactApp } from './ports/dom'\nimport { worker } from './mock_server/browser'\n\nworker.start()\n  .catch(err => console.error(err))\n\ncreateReactApp()\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'antd/dist/antd.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nexport const createReactApp = () => {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n  \n  // If you want to start measuring performance in your app, pass a function\n  // to log results (for example: reportWebVitals(console.log))\n  // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n  reportWebVitals(console.log);\n}\n"],"sourceRoot":""}